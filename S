import pandas as pd
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# –î–∞–Ω–Ω—ã–µ: –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–∂–µ–∫, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–µ—Å—Å–æ–≤, –º–µ—Ç–∫–∞
data = {
    '–î–µ–Ω—å': ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
    '–ü—Ä–æ–±–µ–∂–∫–∏': [0, 1, 2, 3, 4, 5, 6],
    '–°—Ç—Ä–µ—Å—Å—ã': [5, 4, 3, 2, 1, 1, 0],
    '–°–æ—Å—Ç–æ—è–Ω–∏–µ': ['–Ω–µ—Ä–≤–Ω—ã–π', '–Ω–µ—Ä–≤–Ω—ã–π', '–Ω–µ—Ä–≤–Ω—ã–π', '—Å–ø–æ–∫–æ–π–Ω—ã–π', '—Å–ø–æ–∫–æ–π–Ω—ã–π', '—Å–ø–æ–∫–æ–π–Ω—ã–π', '—Å–ø–æ–∫–æ–π–Ω—ã–π']
}

df = pd.DataFrame(data)

# üéØ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
colors = {'—Å–ø–æ–∫–æ–π–Ω—ã–π': 'green', '–Ω–µ—Ä–≤–Ω—ã–π': 'red'}
plt.scatter(df['–ü—Ä–æ–±–µ–∂–∫–∏'], df['–°—Ç—Ä–µ—Å—Å—ã'], c=df['–°–æ—Å—Ç–æ—è–Ω–∏–µ'].map(colors))
for i in range(len(df)):
    plt.text(df['–ü—Ä–æ–±–µ–∂–∫–∏'][i]+0.1, df['–°—Ç—Ä–µ—Å—Å—ã'][i], df['–î–µ–Ω—å'][i])
plt.xlabel('–ü—Ä–æ–±–µ–∂–∫–∏ –≤ –Ω–µ–¥–µ–ª—é')
plt.ylabel('–°—Ç—Ä–µ—Å—Å–æ–≤—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏')
plt.title('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
plt.show()

# üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
X = df[['–ü—Ä–æ–±–µ–∂–∫–∏', '–°—Ç—Ä–µ—Å—Å—ã']]
y = df['–°–æ—Å—Ç–æ—è–Ω–∏–µ']

# üîÑ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# üå≥ Decision Tree
tree = DecisionTreeClassifier(max_depth=3, random_state=42)
tree.fit(X_train, y_train)
y_pred_tree = tree.predict(X_test)

# üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞
plt.figure(figsize=(10, 6))
plot_tree(tree, feature_names=['–ü—Ä–æ–±–µ–∂–∫–∏', '–°—Ç—Ä–µ—Å—Å—ã'], class_names=tree.classes_, filled=True)
plt.title("Decision Tree")
plt.show()

# üí° –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
importances = tree.feature_importances_
for name, importance in zip(['–ü—Ä–æ–±–µ–∂–∫–∏', '–°—Ç—Ä–µ—Å—Å—ã'], importances):
    print(f"–ü—Ä–∏–∑–Ω–∞–∫ '{name}' –≤–∞–∂–Ω–æ—Å—Ç—å: {importance:.2f}")

# ü§ñ KNN
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_test)

# üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
acc_tree = accuracy_score(y_test, y_pred_tree)
acc_knn = accuracy_score(y_test, y_pred_knn)
print(f"\n–¢–æ—á–Ω–æ—Å—Ç—å Decision Tree: {acc_tree:.2f}")
print(f"–¢–æ—á–Ω–æ—Å—Ç—å KNN: {acc_knn:.2f}")
